import org.jenkinsci.plugins.workflow.libs.Library

@Library('jenkins-pipeline-shared-libraries')_

CREATE_RELEASE_BRANCHES = 'create-release-branches'

PIPELINE_REPOS = ['kogito-pipelines']
RUNTIMES_REPOS = ['kogito-runtimes', 'kogito-apps', 'kogito-examples']
OPTAPLANNER_REPOS = ['optaplanner', 'optaweb-vehicle-routing', 'optaweb-employee-rostering', 'optaplanner-quickstarts:development']
IMAGES_REPOS = ['kogito-images']
OPERATOR_REPOS = ['kogito-cloud-operator']

JOBS = [:]

pipeline {
    agent {
        label 'kie-rhel7 && !master'
    }

    // parameters {
    // For parameters, check into .jenkins/dsl/jobs.groovy file
    // }

    environment {
        // Some generated env is also defined into .jenkins/dsl/jobs.groovy file

        KOGITO_CI_EMAIL_TO = credentials("${JENKINS_EMAIL_CREDS_ID}")
    }

    stages {
        stage('Initialize') {
            steps {
                script {
                    assert getKogitoVersion() != ''
                    assert getOptaPlannerVersion() != ''

                    // Set release branch
                    env.RELEASE_BRANCH = util.getReleaseBranchFromVersion(getKogitoVersion())
                    echo "Kogito Release Branch ${getReleaseBranch()}"

                    env.OPTAPLANNER_RELEASE_BRANCH = params.OPTAPLANNER_RELEASE_BRANCH ?: util.getReleaseBranchFromVersion(getOptaPlannerVersion())
                    echo "OptaPlanner Release Branch ${getOptaPlannerReleaseBranch()}"

                    currentBuild.displayName = getDisplayName()

                    sendNotification("Release Pipeline on branch ${getReleaseBranch()} has started...\n=> ${env.BUILD_URL}")
                }
            }
        }

        stage('Create Kogito release branches') {
            steps {
                script {
                    def buildParams = []
                    addDisplayNameParam(buildParams)
                    addStringParam(buildParams, 'RELEASE_BRANCH', getReleaseBranch())

                    def repositories = []
                    repositories += RUNTIMES_REPOS
                    repositories += IMAGES_REPOS
                    repositories += OPERATOR_REPOS
                    repositories += PIPELINE_REPOS // Create branch to activate nightlies if needed

                    echo "Call ${CREATE_RELEASE_BRANCHES} job with repositories ${repositories}"
                    addStringParam(buildParams, 'REPOSITORIES', repositories.join(','))
                    buildJob(CREATE_RELEASE_BRANCHES, buildParams)

                    sendNotification("${getReleaseBranch()} branches have been created for repositories: ${repositories}")
                }
            }
        }

        stage('Create OptaPlanner release branches') {
            when {
                expression { return isArtifactsDeploy() }
            }
            steps {
                script {
                    def buildParams = []
                    addDisplayNameParam(buildParams, getDisplayName(getOptaPlannerReleaseBranch()))
                    addStringParam(buildParams, 'RELEASE_BRANCH', getOptaPlannerReleaseBranch())

                    def repositories = []
                    if (isArtifactsDeploy()) {
                        repositories += OPTAPLANNER_REPOS
                    }

                    echo "Call ${CREATE_RELEASE_BRANCHES} job with repositories ${repositories}"
                    addStringParam(buildParams, 'REPOSITORIES', repositories.join(','))
                    buildJob(CREATE_RELEASE_BRANCHES, buildParams)

                    sendNotification("${getOptaPlannerReleaseBranch()} branches have been created for repositories: ${repositories}")
                }
            }
        }
    }
}

void buildJob(String jobName, List buildParams) {
    echo "Build ${jobName} with params ${buildParams}"

    build(job: "${jobName}", wait: true, parameters: buildParams, propagate: true)
}

def getJob(String jobName) {
    return JOBS[jobName]
}

String getJobUrl(String jobName) {
    echo "getJobUrl for ${jobName}"
    def job = getJob(jobName)
    return job ? job.getAbsoluteUrl() : ''
}

void sendErrorNotification() {
    sendNotification("Kogito release job #${BUILD_NUMBER} was: ${currentBuild.currentResult}\nPlease look here: ${BUILD_URL}")
}

void sendNotification(String body) {
    echo 'Send Notification'
    echo body
    emailext body: body, subject: "[${getReleaseBranch()}] Release Pipeline",
                to: env.KOGITO_CI_EMAIL_TO
}

void addDisplayNameParam(buildParams, name = '') {
    addStringParam(buildParams, 'DISPLAY_NAME', name ?: getDisplayName())
}

void addStringParam(List params, String key, String value) {
    params.add(string(name: key, value: value))
}

String getDisplayName(branch = '') {
    return "Cut-off ${branch ?: getReleaseBranch()}"
}

String getKogitoVersion() {
    return params.KOGITO_VERSION
}

String getOptaPlannerVersion() {
    return params.OPTAPLANNER_VERSION
}

String getReleaseBranch() {
    return env.RELEASE_BRANCH
}

String getGitAuthor() {
    return env.GIT_AUTHOR
}

String getOptaPlannerReleaseBranch() {
    return env.OPTAPLANNER_RELEASE_BRANCH
}
